
### **1. Пакет: `ru.nsu.ccfit.factory`**
#### **1.1. Подпакет: `model`**

##### **Класс: `Body`**
```java
public class Body {
    private final int id;
    public Body(int id) { this.id = id; }
    public int getId() { return id; }
}
```

##### **Класс: `Engine`**
```java
public class Engine {
    private final int id;
    public Engine(int id) { this.id = id; }
    public int getId() { return id; }
}
```

##### **Класс: `Accessory`**
```java
public class Accessory {
    private final int id;
    public Accessory(int id) { this.id = id; }
    public int getId() { return id; }
}
```

##### **Класс: `Car`**
```java
public class Car {
    private final int id;
    private final Body body;
    private final Engine engine;
    private final Accessory accessory;

    public Car(int id, Body body, Engine engine, Accessory accessory) {
        this.id = id;
        this.body = body;
        this.engine = engine;
        this.accessory = accessory;
    }
    // Getters...
}
```

##### **Класс: `Storage<T>`**
```java
public abstract class Storage<T> {
    private final int capacity;
    private final Queue<T> items = new LinkedList<>();
    private final Object lock = new Object();

    public Storage(int capacity) { this.capacity = capacity; }

    public void add(T item) throws InterruptedException { ... }
    public T take() throws InterruptedException { ... }
    public int getSize() { ... }
}
```

##### **Класс: `BodySupplier`**
```java
public class BodySupplier extends StoppableThread {
    private final Storage<Body> storage;
    private static int nextId = 0;

    public BodySupplier(Storage<Body> storage, int minDelay, int maxDelay) {
        super(minDelay, maxDelay);
        this.storage = storage;
    }

    @Override
    protected void performAction() throws InterruptedException {
        storage.add(new Body(nextId++));
    }
}
```

##### **Класс: `Worker` (задача для ThreadPool)**
```java
public class Worker implements Runnable {
    private final BodyStorage bodyStorage;
    private final EngineStorage engineStorage;
    private final AccessoryStorage accessoryStorage;
    private final CarStorage carStorage;

    public Worker(...) { ... }

    @Override
    public void run() {
        // Логика сборки машины
    }
}
```

##### **Класс: `Dealer`**
```java
public class Dealer extends StoppableThread {
    private final int id;
    private final CarStorage carStorage;
    private final Logger logger;

    public Dealer(...) { ... }

    @Override
    protected void performAction() throws InterruptedException {
        Car car = carStorage.take();
        logger.logSale(id, car);
    }
}
```

---

#### **1.2. Подпакет: `controller`**

##### **Класс: `FactoryController`**
```java
public class FactoryController {
    private final BodyStorage bodyStorage;
    private final EngineStorage engineStorage;
    private final AccessoryStorage accessoryStorage;
    private final CarStorage carStorage;
    private final List<StoppableThread> suppliers;
    private final List<Dealer> dealers;
    private final ThreadPool threadPool;

    public void startProduction() { ... }
    public void stopProduction() { ... }
    public void setSupplierDelay(SupplierType type, int delay) { ... }
}
```

##### **Класс: `CarStorageController`**
```java
public class CarStorageController {
    private final CarStorage carStorage;
    private final ThreadPool threadPool;
    private final int minThreshold;

    public void onCarSold() { ... }
    public void onCarProduced() { ... }
}
```

---

#### **1.3. Подпакет: `threadpool`**

##### **Класс: `ThreadPool`**
```java
public class ThreadPool {
    private final BlockingQueue<Runnable> taskQueue;
    private final List<Thread> workers;
    private volatile boolean isRunning;

    public ThreadPool(int poolSize) { ... }
    public void addTask(Runnable task) { ... }
    public void shutdown() { ... }
}
```

---

#### **1.4. Подпакет: `observer`**

##### **Интерфейс: `StorageObserver`**
```java
public interface StorageObserver {
    void onBodyCountChanged(int count);
    void onEngineCountChanged(int count);
    void onCarCountChanged(int count);
    void onMessage(String message);
}
```

##### **Класс: `FactoryView` (GUI)**
```java
public class FactoryView implements StorageObserver {
    @Override
    public void onBodyCountChanged(int count) { ... }
    // Остальные методы...
}
```

---

#### **1.5. Подпакет: `util`**

##### **Класс: `Config`**
```java
public class Config {
    private int bodyStorageSize;
    private int engineStorageSize;
    private int accessoryStorageSize;
    private int carStorageSize;
    private int workersCount;
    // Остальные поля...

    public static Config load(String filePath) { ... }
    // Getters...
}
```

##### **Класс: `Logger`**
```java
public class Logger {
    private final boolean isEnabled;
    private final PrintWriter writer;

    public void logSale(int dealerId, Car car) { ... }
    public void close() { ... }
}
```

---

### **2. Главный класс**
#### **Пакет: `ru.nsu.ccfit.factory`**
##### **Класс: `Main`**
```java
public class Main {
    public static void main(String[] args) {
        Config config = Config.load("factory.cfg");
        // Инициализация модели, контроллера, GUI...
    }
}
```

